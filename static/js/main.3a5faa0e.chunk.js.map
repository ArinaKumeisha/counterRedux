{"version":3,"sources":["Redux-store/counter-reducer.tsx","Redux-store/store.ts","utils/local.storage.tsx","Display/Display.tsx","SettingsOfButton/SettingsOfButtons.tsx","Settings/Settings.tsx","App.tsx","index.tsx"],"names":["ACTION_TYPE","initialState","value","maxValue","startValue","mode","changeMode","type","CHANGE_MODE","payload","rootReducer","combineReducers","counter","state","action","INCREMENT","RESET","SET","SET_MAX_VALUE","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","window","Display","props","increment","reset","inCorrect","useSelector","importance","className","onClick","disabled","SettingsOfButton","dispatch","useDispatch","set","Settings","maxValueHandler","startValueHandler","onChange","e","currentTarget","App","SetAC","SetMaxValueAC","SET_START_VALUE","SetStartValueAC","ResetAC","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a5faa0e.chunk.js","sourcesContent":["enum ACTION_TYPE {\r\n    CHANGE_MODE = 'CHANGE_MODE',\r\n    RESET = \"RESET\",\r\n    INCREMENT = \"INCREMENT\",\r\n    SET = \"SET\",\r\n    SET_MAX_VALUE = \"SET-MAX-VALUE\",\r\n    SET_START_VALUE = \"SET-START-VALUE\",\r\n\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof IncrementAC> |\r\n    ReturnType<typeof ResetAC> |\r\n    ReturnType<typeof SetAC> |\r\n    ReturnType<typeof SetMaxValueAC> |\r\n    ReturnType<typeof SetStartValueAC> |\r\n    ReturnType<typeof changeMode>\r\n\r\n\r\nexport const initialState = {\r\n    value: 0,\r\n    maxValue: 1,\r\n    startValue: 0,\r\n    mode: 'counter'\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INCREMENT:\r\n            if (state.value < state.maxValue) {\r\n                return {\r\n                    ...state, value: state.value + 1\r\n                }\r\n            } else {\r\n                return state\r\n            }\r\n        case ACTION_TYPE.RESET:\r\n            return {\r\n                ...state, value: action.value - 1\r\n            }\r\n        case ACTION_TYPE.SET:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                startValue: action.startValue,\r\n                value: action.startValue\r\n            }\r\n        case ACTION_TYPE.SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n\r\n        case \"SET-START-VALUE\":\r\n\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case ACTION_TYPE.CHANGE_MODE:\r\n            return {\r\n                ...state,\r\n                mode: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const IncrementAC = () => {\r\n    return {\r\n        type: ACTION_TYPE.INCREMENT,\r\n    } as const\r\n}\r\n\r\nexport const ResetAC = (value: number) => {\r\n    return {\r\n        type: ACTION_TYPE.RESET,\r\n        value,\r\n    } as const\r\n}\r\nexport const SetAC = (startValue: number, maxValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.SET,\r\n        startValue,\r\n        maxValue\r\n    } as const\r\n}\r\n\r\nexport const SetMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_MAX_VALUE,\r\n        maxValue,\r\n    } as const\r\n}\r\n\r\nexport const SetStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_START_VALUE,\r\n        startValue,\r\n    } as const\r\n}\r\nexport const changeMode = (mode: 'settings' | 'counter') => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_MODE,\r\n        payload: mode\r\n    } as const\r\n}\r\n\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"../utils/local.storage\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst persistedState = loadState();\r\n\r\nexport let store = createStore(rootReducer, persistedState)\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    });\r\n});\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"currentState\", JSON.stringify(store.getState()))\r\n\r\n})\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import {AppStateType} from \"../Redux-store/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('currentState');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('currentState', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n//логика сохранения еще есть в файле store\r\n\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux-store/store\";\r\nimport \"./Display.css\"\r\n\r\ntype DisplayType = {\r\n    increment: () => void\r\n    reset: (counter: number) => void\r\n    inCorrect: boolean\r\n    value: number\r\n    startValue: number\r\n    maxValue: number\r\n}\r\nexport const Display: React.FC<DisplayType> = props => {\r\n    const {\r\n\r\n        increment,\r\n        value,\r\n        startValue,\r\n        maxValue,\r\n        reset,\r\n        inCorrect,\r\n    } = props\r\n    const mode = useSelector<AppStateType>(state => state.counter.mode)\r\n\r\n\r\n    const importance = (\r\n        inCorrect ? \"Incorrect value\" : `Enter values and enter \"set\"`\r\n    )\r\n\r\n    return (\r\n        <div className={'containerDisplay'}>\r\n            <h3 className={maxValue === value ?\r\n                'valueError' : 'value'}>\r\n\r\n                {mode === 'settings' && importance}\r\n                {mode === 'counter' && value}\r\n            </h3>\r\n            <button onClick={() => increment()}\r\n                    disabled={inCorrect || maxValue === value}\r\n                    className={\"button\"}\r\n            >increment\r\n            </button>\r\n            <button onClick={() => {\r\n                reset(startValue + 1)\r\n            }}\r\n                    className={\"button\"}>reset\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {changeMode} from \"../Redux-store/counter-reducer\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype ButtonSetType = {\r\n    inCorrect: boolean\r\n    startValue: number\r\n    maxValue: number\r\n    set: (startValue: number, maxValue: number) => void\r\n\r\n}\r\nexport const SettingsOfButton: React.FC<ButtonSetType> = props => {\r\n    const {\r\n        inCorrect,\r\n        startValue,\r\n        maxValue,\r\n    } = props\r\n\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            <button disabled={inCorrect}\r\n                    className={\"button\"}\r\n                    onClick={() => {\r\n                        props.set(startValue, maxValue)\r\n                        dispatch(changeMode('counter'))\r\n                    }}\r\n            >SET\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeMode} from \"../Redux-store/counter-reducer\";\r\nimport './Settings.css'\r\nimport {SettingsOfButton} from \"../SettingsOfButton/SettingsOfButtons\";\r\n\r\n\r\ntype SettingsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    maxValueHandler: (maxValue: number) => void\r\n    startValueHandler: (startValue: number) => void\r\n    set: (startValue: number, maxValue: number) => void\r\n    inCorrect: boolean\r\n\r\n}\r\n\r\n\r\nexport const Settings: React.FC<SettingsType> = props => {\r\n    const {\r\n        maxValueHandler,\r\n        startValueHandler,\r\n        set,\r\n        inCorrect,\r\n        startValue,\r\n        maxValue,\r\n\r\n    } = props;\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        maxValueHandler(+e.currentTarget.value)\r\n        dispatch(changeMode('settings'))\r\n    }\r\n\r\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        startValueHandler(+e.currentTarget.value)\r\n        dispatch(changeMode('settings'))\r\n    }\r\n\r\n    return (\r\n        <div className={\"containerSettings\"}>\r\n            <h3>MaxValue</h3>\r\n\r\n            <input type={\"number\"}\r\n                   value={maxValue}\r\n                   onChange={onChangeMaxValueHandler}\r\n                   className={inCorrect ? 'error' : 'input'}\r\n            />\r\n\r\n\r\n            <h3>StartValue</h3>\r\n\r\n            <input type={\"number\"}\r\n                   value={startValue}\r\n                   onChange={onChangeStartValueHandler}\r\n                   className={inCorrect ? 'error' : 'input'}/>\r\n\r\n            <SettingsOfButton\r\n                set={set}\r\n                inCorrect={inCorrect}\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {IncrementAC, ResetAC, SetAC, SetMaxValueAC, SetStartValueAC} from './Redux-store/counter-reducer';\nimport {AppStateType} from './Redux-store/store';\nimport {Display} from \"./Display/Display\";\nimport {Settings} from './Settings/Settings';\n\n\nexport const App = () => {\n    const dispatch = useDispatch()\n    const value = useSelector<AppStateType, number>((state) => state.counter.value)\n    const startValue = useSelector<AppStateType, number>((state) => state.counter.startValue)\n    const maxValue = useSelector<AppStateType, number>((state) => state.counter.maxValue)\n\n\n    const inCorrect =\n        maxValue < startValue ||\n        maxValue < 0 || startValue < 0 ||\n        maxValue === startValue\n\n    const increment = () => {\n        dispatch(IncrementAC())\n    }\n    const reset = (counter: number) => {\n        dispatch(ResetAC(counter))\n    }\n\n    const set = (startValue: number, maxValue: number) => {\n        dispatch(SetAC(startValue, maxValue))\n\n    }\n\n\n    const maxValueHandler = (maxValue: number) => {\n        dispatch(SetMaxValueAC(maxValue))\n    }\n\n\n    const startValueHandler = (startValue: number) => {\n        dispatch(SetStartValueAC(startValue))\n    }\n\n    return (\n\n        <div className='App'>\n            <h1>Counter</h1>\n            <div className='container'>\n            <Settings\n                inCorrect={inCorrect}\n                startValue={startValue}\n                maxValue={maxValue}\n                set={set}\n                maxValueHandler={maxValueHandler}\n                startValueHandler={startValueHandler}\n            />\n\n            <Display\n                inCorrect={inCorrect}\n                value={value}\n                startValue={startValue}\n                maxValue={maxValue}\n                increment={increment}\n                reset={reset}\n            />\n            </div>\n        </div>\n\n    )\n\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux-store/store\";\nimport {App} from \"./App\";\n\n\nReactDOM.render(\n\n<Provider store={store}>\n    <div className={'Fon'}>\n    <App/>\n    </div>\n    </Provider>,document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}